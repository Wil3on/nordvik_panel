import { NextResponse } from 'next/server';
import { requireAdmin } from '@/lib/auth';

// This is a test API endpoint to generate notifications
// In a real application, notifications would be generated by events in the system
export async function POST(request: Request) {
  try {
    // Ensure the user is an admin
    const user = await requireAdmin();
    
    // Get notification data from request
    const data = await request.json();
    
    // Validate required fields
    if (!data.type || !data.message) {
      return NextResponse.json(
        { error: 'Type and message are required' },
        { status: 400 }
      );
    }
    
    // In a real application, we would validate the type
    const validTypes = ['INFO', 'SUCCESS', 'WARNING', 'ERROR'];
    if (!validTypes.includes(data.type)) {
      return NextResponse.json(
        { error: 'Type must be one of: INFO, SUCCESS, WARNING, ERROR' },
        { status: 400 }
      );
    }
    
    // Here we would normally save the notification to the database
    // and then trigger the Socket.io event to notify clients
    
    // Access the global sendNotification function defined in server.js
    // Using the type declaration from types/global.d.ts
    // @ts-ignore - Ignore TypeScript error as we know sendNotification is available at runtime
    if (typeof global.sendNotification === 'function') {
      // @ts-ignore - Ignore TypeScript error as we know sendNotification is available at runtime
      const notification = global.sendNotification({
        type: data.type,
        message: data.message,
        userId: data.userId, // Optional: If specified, only this user will receive the notification
        link: data.link, // Optional: Link to navigate to when clicking the notification
      });
      
      return NextResponse.json({ success: true, notification });
    } else {
      return NextResponse.json(
        { error: 'Notification service not available' },
        { status: 503 }
      );
    }
  } catch (error) {
    console.error('Error in test notification API:', error);
    return NextResponse.json(
      { error: 'Failed to send test notification' },
      { status: 500 }
    );
  }
}
